Resources:
# Deploy Bastion Server #########################################################
  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: ami-0888db1202897905c
      SubnetId: !ImportValue PublicSubnetVPC2BastionId
      SecurityGroupIds:
        - !ImportValue BastionSecurityGroupId
      KeyName: vockey
      BlockDeviceMappings:
        - DeviceName: /dev/sda1  
          Ebs:
            VolumeSize: 50       
            VolumeType: gp2      
      Tags:
        - Key: Name
          Value: FinsecureBastion2

# RDS Instance (MYSQL) in private Subnet VPC1 ########################################################
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro 
      AllocatedStorage: "20"
      DBName: MyDatabase
      Engine: MySQL
      MasterUsername: admin 
      MasterUserPassword: password123
      VPCSecurityGroups:
        #- !Ref DatabaseSecurityGroup   
        - !ImportValue DatabaseSecurityGroupId
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MultiAZ: true
      PubliclyAccessible: false 
      StorageType: "gp2"

       # RDS subnet group ########################################################
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private Subnet Group for RDS"
      SubnetIds:
        #- !Ref PrivateSubnetVPC1RDS01    
        #- !Ref PrivateSubnetVPC1RDS02    
        - !ImportValue Rds01PrivateSubnetId 
        - !ImportValue Rds02PrivateSubnetId

# Launch template for web servers ######################################33
  webServersFinsecureTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: webServersFinsecureTemplate
      LaunchTemplateData: 
        InstanceType: t3.small
        ImageId: ami-0866a3c8686eaeeba
        KeyName: vockey
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !ImportValue WebServerSecurityGroupId 
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt update -y
            apt install apache2 -y
            apt install php8.3 -y
            apt-get install -y php8.3-cli php8.3-common php8.3-mysql php8.3-zip php8.3-gd php8.3-mbstring php8.3-curl php8.3-xml php8.3-bcmath -y
            apt install git -y
            systemctl start apache2
            systemctl enable apache2
            
            # Create PHP file with database connection
            cat <<EOF > /var/www/html/PDOFsecure.php
            <?php
            \$servername = "${RDSInstance.Endpoint.Address}";
            \$username = "admin";
            \$password = "password123";
            \$dbname = "MyDatabase";

            try {
                // Create a PDO connection
                \$conn = new PDO("mysql:host=\$servername;dbname=\$dbname", \$username, \$password);
                \$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

                // SQL query
                \$sql = "SELECT * FROM Finsecure"; 

                // Prepare the SQL statement
                \$stmt = \$conn->prepare(\$sql);

                // Execute the statement
                \$stmt->execute();

                // Fetch results as an associative array
                \$stmt->setFetchMode(PDO::FETCH_ASSOC);

                if (\$stmt->rowCount() > 0) {
                    echo "<table border='1'><tr><th>ID</th><th>Name</th></tr>";
                    foreach (\$stmt->fetchAll() as \$row) {
                        echo "<tr><td>" . \$row['id'] . "</td><td>" . \$row['name'] . "</td></tr>";
                    }
                    echo "</table>";
                } else {
                    echo "0 results";
                }
            } catch (PDOException \$e) {
                echo "Connection failed: " . \$e->getMessage();
            }

            // Close the connection
            \$conn = null;
            ?>
            EOF




# Auto Scaling group ############################################
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue WebServer01PublicSubnetVPC2Id
        - !ImportValue WebServer02PublicSubnetVPC2Id
        - !ImportValue WebServer03PublicSubnetVPC2Id
        - !ImportValue WebServer04PublicSubnetVPC2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref webServersFinsecureTemplate
        Version: !GetAtt webServersFinsecureTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref WebServerTargetGroup


# Target group ############################################
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue VPC2Id
      TargetType: instance


# Application load balancer ############################3
  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebServerALB
      Scheme: internet-facing
      Subnets:
        - !ImportValue WebServer01PublicSubnetVPC2Id
        - !ImportValue WebServer02PublicSubnetVPC2Id
        - !ImportValue WebServer03PublicSubnetVPC2Id
        - !ImportValue WebServer04PublicSubnetVPC2Id
      SecurityGroups:
        - !ImportValue WebServerSecurityGroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    
  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: 80
      Protocol: HTTP


######################################################## Outputs  ########################################################

Outputs:

  PublicBastionIp:
    Description: Public IP address of the Bastion instance
    Value: !GetAtt BastionServer.PublicIp

  RDSInstanceEndpointValue:
    Description: Endpoint of the RDS Instance
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: RdsEndpointExport



  WebServerLoadBalancerDNS:
    Description: DNS name of the Load Balancer for Web Servers
    Value: !GetAtt WebServerLoadBalancer.DNSName

